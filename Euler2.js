/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

 var assert = require('chai').assert;
 var expect = require('chai').expect;
 var should = require('chai').should();
  function solution(){
    return {
      solveFor: function(limit){
        return 0;
      },
      /**
       *@param Number limit
       *@return Array of Number in fibonacci sequence up to limit
       */
       fibonacci: function(limit){
         var prev = 1, curr = 2, temp;
         var sequence = [ 1, 2 ];

         //check for minimum sequence
         if (limit<3) {
           return [ ];
         }
         while ( prev + curr < limit ){
           temp = prev + curr;
           prev = curr;
           curr = temp;
           sequence.push(temp);
         }
         return sequence;
       }
       filterEvens; fuction (list){
         return list.filter (function(){
           return (item % 2 === 0);
         });
       }
       sum: function (list){
         var total = 0
         arr.forEach(function(element){
           total+=element;
         });
         return total;
       }
    }
  }

  //sum (arrEvens);

  describe ('Project Euler No. 2', funciton (){
    var S; //or var S = solution ();
    beforeEach(function(){
      S = solution();
    });

    describe('fibonacci sequence', funciton (){
      it('should have a function for doing this', function (){
        assert.isFunction(S.fibonacci);
        assert.deepEqual(S.fibonacci(0), [ ]);

      });
      it ('should calculate fibonacci numbers for a small sample', function(){
        assert.deepEqual(S.fibonacci(3), [1, 2]);
        assert.deepEqual(S.fibonacci(5), [1, 2, 3]);
        assert.deepEqual(S.fibonacci(10), [1, 2, 3, 5, 8]);
        assert.deepEqual(S.fibonacci(20), [1, 2, 3, 5, 8, 13]);
      });
    });

    describe('sum values in a list', function(){
      it('should have a function for doing this', function(){
        assert.isFunction(S.filterEvens);
      });
      it('should filter our evens', function(){
        assert.deepEqual(S.filterEvens([ 1 ]), [ ]);
        assert.deepEqual(S.filterEvens([ 2 ]), [ 2 ]);
        assert.deepEqual(S.filterEvens([ 1, 2 ]), [ 2 ]);
        assert.deepEqual(S.filterEvens([ 1, 2, 3 ]), [ 2 ]);
      });
    });

    
  })
